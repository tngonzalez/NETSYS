// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

//Tablas con datos preestablecidos
model TipoCliente {
  idTipo Int    @id @default(autoincrement())
  nombre String @db.VarChar(50)

  Cliente Cliente[]
}

model ONT {
  idONT             Int    @id @default(autoincrement())
  potenciaRecepcion String @db.VarChar(100)
  numActivo         String @unique @db.VarChar(100)
  macAddress        String @unique @db.VarChar(100)
  numSN             String @db.VarChar(100)

  Cliente Cliente[]
}

model EstadoCliente {
  idEstado Int    @id @default(autoincrement())
  nombre   String @db.VarChar(50)

  Cliente Cliente[]
}

model EstadoRouter {
  idEstado Int    @id @default(autoincrement())
  nombre   String @db.VarChar(50)

  Router Router[]
}

model Router {
  idRouter        Int    @id @default(autoincrement())
  idEstado        Int
  numActivo       String @unique @db.VarChar(50)
  serie           String @unique @db.VarChar(100)
  macAddress      String @unique @db.VarChar(100)
  tipoDispositivo String @db.VarChar(50)
  idSubred_OLT    Int?
  idZona_OLT      Int?
  idOLT           Int?

  estado   EstadoRouter   @relation(fields: [idEstado], references: [idEstado])
  olt    OLT?        @relation(fields: [idOLT], references: [idOLT])
  subred Subred_OLT? @relation(fields: [idSubred_OLT], references: [idRed])
  zona   Zona_OLT?   @relation(fields: [idZona_OLT], references: [idZona])

  Cliente Cliente[]
}

model OLT {
  idOLT        Int    @id @default(autoincrement())
  nombreTipo   String @unique @db.VarChar(100)
  ODF          Int
  segmentoZona String @db.VarChar(50)
  ipGeneral    String @unique @db.VarChar(50)
  puertoNAT    String @db.VarChar(50)

  Router     Router[]
  Subred_OLT Subred_OLT[]
  Zona_OLT   Zona_OLT[]
}

model Subred_OLT {
  idRed Int    @id @default(autoincrement())
  idOLT Int
  ip    String @unique @db.VarChar(100)

  olt    OLT      @relation(fields: [idOLT], references: [idOLT])
  Router Router[]
}

model Zona_OLT {
  idZona     Int    @id @default(autoincrement())
  idOLT      Int
  nombreZona String @db.VarChar(100)

  olt    OLT      @relation(fields: [idOLT], references: [idOLT])
  Router Router[]
}

model Condominio {
  idCondominio Int    @id @default(autoincrement())
  zona         String @db.VarChar(100)
  numCasa      Int

  infoCliente InfoCliente[]
}

model InfoCliente {
  idInfoCliente Int    @id @default(autoincrement())
  idCondominio  Int
  numero        String @db.VarChar(30)
  nombre        String @db.VarChar(100)

  condominio Condominio @relation(fields: [idCondominio], references: [idCondominio])
  cliente    Cliente[]

  IpPublica IpPublica[]
}

model BW {
  idBW   Int    @id @default(autoincrement())
  nombre String @db.VarChar(100)

  cliente Cliente[]
}

model Cliente {
  idCliente        Int      @id @default(autoincrement())
  idInfoCliente    Int
  idTipo           Int
  idONT            Int
  idEstado         Int
  idRouter         Int?
  idBW             Int
  BW_KBPS          Int
  numOS            Int
  cajaDerivada     String   @db.VarChar(150)
  fechaInstalacion DateTime
  comentario       String   @db.VarChar(200)
  agente           String   @db.VarChar(100)
  cloudMonitoreo   String   @unique @db.VarChar(150)

  infoCliente InfoCliente   @relation(fields: [idInfoCliente], references: [idInfoCliente])
  tipoCliente TipoCliente   @relation(fields: [idTipo], references: [idTipo])
  ont         ONT           @relation(fields: [idONT], references: [idONT])
  estado      EstadoCliente @relation(fields: [idEstado], references: [idEstado])
  bw          BW            @relation(fields: [idBW], references: [idBW])
  router Router?   @relation(fields: [idRouter], references: [idRouter])

  Retiro Retiro[]

  IPTV IPTV[]

  Danado Danado[]
}

model EstadoRetiro {
  idEstado Int    @id @default(autoincrement())
  nombre   String @db.VarChar(100)

  retiro Retiro[]
}

model Retiro {
  idRetiro            Int      @id @default(autoincrement())
  idCliente           Int
  idEstado            Int
  fechaDesinstalacion DateTime
  comentario          String   @db.VarChar(200)
  agente              String   @db.VarChar(100)

  cliente Cliente      @relation(fields: [idCliente], references: [idCliente])
  estado  EstadoRetiro @relation(fields: [idEstado], references: [idEstado])
}

model TipoDano {
  idDano Int    @id @default(autoincrement())
  nombre String @db.VarChar(100)

  danado Danado[]
}

model Danado {
  idDanado         Int      @id @default(autoincrement())
  idCliente        Int
  fechaInstalacion DateTime
  dispositivo      String   @db.VarChar(150)
  direccionNueva   String   @db.VarChar(100)
  direccionActual  String   @db.VarChar(100)
  comentario       String   @db.VarChar(200)
  idTipo           Int

  cliente   Cliente?   @relation(fields: [idCliente], references: [idCliente])
  tipo TipoDano @relation(fields: [idTipo], references: [idDano])
}

model EstadoInstalacion {
  idEstado Int    @id @default(autoincrement())
  nombre   String @db.VarChar(100)

  iptv IPTV[]
}

model DNS_Stick {
  idDNS            Int      @id @default(autoincrement())
  correo           String   @db.VarChar(100)
  clave            String   @db.VarChar(100)
  macAddress       String   @unique @db.VarChar(100)
  dns              String   @db.VarChar(100)
  fechaInstalacion DateTime
  comentario       String   @db.VarChar(200)

  iptv IPTV[]
}

model IPTV {
  idIPTV           Int      @id @default(autoincrement())
  idCliente        Int
  idEstado         Int
  idDNS            Int
  fechaInstalacion DateTime
  comentario       String   @db.VarChar(200)
  agente           String   @db.VarChar(100)
  macAddress       String   @unique @db.VarChar(100)
  correo           String   @db.VarChar(100)
  clave            String   @db.VarChar(100)

  cliente Cliente           @relation(fields: [idCliente], references: [idCliente])
  estado  EstadoInstalacion @relation(fields: [idEstado], references: [idEstado])
  dns     DNS_Stick         @relation(fields: [idDNS], references: [idDNS])
}

model IpPublica {
  idIP          Int    @id @default(autoincrement())
  idInfoCliente Int
  red           String @unique @db.VarChar(100)
  gateway       String @unique @db.VarChar(100)
  cliente       String @unique @db.VarChar(100)
  broadcast     String @unique @db.VarChar(100)
  punto         String @db.VarChar(100)
  nota          String @db.VarChar(200)

  infoCliente InfoCliente @relation(fields: [idInfoCliente], references: [idInfoCliente])
}
